/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles.css":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles.css ***!
  \**************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ \"./node_modules/css-loader/dist/runtime/sourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `* {\n    margin: 0;\n    border: 0;\n    box-sizing: border-box;\n    font-family: Roboto;\n}\n\nbody {\n    width: 100svw;\n    height: 100svh;\n    background-color: #dddedf;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    row-gap: 1rem;\n    position: relative;\n}\n\n.taskView {\n    width: 90%;\n    height: 40%;\n    display: flex;\n    background-color: hsl(0, 0%, 100%);\n    padding: 10px;\n    gap: 5px;\n    color: rgb(0, 0, 0);\n    border-radius: 12px;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.07);\n    overflow: hidden;\n}\n\n.viewLeft, .viewRight {\n    width: 50%;\n    display: flex;\n    flex-direction: column;\n}\n\n.todaysTasks, .upcomingTasks, .overdueTasks {\n    width: 100%;\n    height: 80%;\n    overflow-y: scroll;\n    padding: 5px 10px 5px 0px;\n    font-weight: 400;\n    font-size: 0.8rem;\n    color: rgba(0, 0, 0, 0.459);\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.quickTaskRow {\n    font-size: 1rem;\n    color: black;\n}\n\n.todaysTasks .quickTaskCheckBox {\n    width: 1rem;\n}\n\n.viewLeft {\n    border-right: 2px solid black;\n}\n\n.viewRight {\n    display: flex;\n    flex-direction: column;\n    padding-left: 2px;\n}\n\n.upcoming, .overdue {\n    width: 100%;\n    height: 50%;\n    padding-top: 5px;\n    display: flex;\n    flex-direction: column;\n}\n\n.quickTaskRow {\n    display: flex;\n    padding: 0 5px 0 5px;\n}\n\n.quickTaskCheckBox {\n    margin-right: 5px;\n}\n\n#projectFolder {\n    width: 90%;\n    height: 50%;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 1rem;\n    overflow-y: scroll;\n    padding: 8px 0px 8px 8px;\n}\n\n.footer {\n    width: 100%;\n    height: 5%;\n    position: absolute;\n    bottom: 0px;\n    padding-left: 50px;\n    display: flex;\n    align-items: flex-end;\n    gap: 10px;\n    padding-bottom: 2px;\n}\n\n.circleLegend {\n    border: 1px solid white;\n    border-radius: 50%;\n    width: 0.8rem;\n    height: 0.8rem;\n    background-color: white;\n}\n\n.wrap {\n    display: flex;\n    gap: 5px;\n}\n\n.lowPrio {\n    background-color: #3b82f6;\n}\n\n.medPrio {\n    background-color: #f59e0b;\n}\n\n.highPrio {\n    background-color: #ef4444;\n}\n\n.legendText {\n    font-size: 0.8rem;\n    color: rgba(0, 0, 0, 0.555)\n}\n.addButtonHome {\n    width: 100px;\n    height: 100px;\n    display: none;\n    border-radius: 50%;\n    position: fixed;\n    bottom: 20px;\n    right: 10px;\n    background-color: rgb(136, 78, 78);\n    color: white;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n}\n\n.addButton {\n    width: auto;\n    height: 200px;\n    color: rgba(0, 0, 0, 0.445);\n    background-color: white;\n    border-radius: 12px;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.07);\n}\n\n#centerButton {\n    width: 100%;\n    height: 100%;\n    background-color: rgba(17, 40, 82, 0.466);\n    grid-area: 1 / 1 / 2 / -1;\n}\n\n.projectCard {\n    width: auto;\n    height: 200px;\n    background-color: white;\n    position: relative;\n    padding: 5px;\n    border-radius: 12px;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.07);\n    padding: 8px;\n    overflow: hidden;\n}\n\n.projectCardTaskList {\n    height: 75%;\n    overflow-y: scroll;\n    overflow-x: hidden;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.projectCardCompletedTasks {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.projectCardTitle {\n    font-weight: 600;\n    margin-bottom: 10px;\n}\n\n.projectCardTaskRow {\n    display: flex;\n    pointer-events: none;\n}\n\n.projectCardCheckbox {\n    margin-right: 5px;\n}\n\n.projectCardCheckbox, .projectCardTaskContent, .projectCard label {\n    pointer-events: auto;\n}\n\n.noTasksMessage {\n    font-size: 0.8rem;\n    font-weight: 400;\n    color: rgba(0, 0, 0, 0.459);\n    padding: 3px 0px 0px 2px;\n}\n\n.toggleCompletedBtn {\n    position: absolute;\n    left: 10px;\n    bottom: 10px;\n    background: none;\n    color: grey;\n    text-decoration: underline;\n}\n\n.completed {\n    text-decoration: line-through;\n    color: #777;\n}\n\n.trashButton {\n    position: absolute;\n    right: 20px;\n    bottom: 10px;\n    background-color: rgb(253, 166, 166);\n    border-radius: 10px;\n    padding: 0;\n    display: flex;\n    color: red;\n}\n\n.modal {\n    width: 100svw;\n    height: 100svh;\n    display: none;\n    flex-direction: column;\n    position: fixed;\n    left: 0;\n    top: 0;\n    z-index: 1;\n    justify-content: center;\n    align-items: center;\n    opacity: 0;\n    transform: scale(0.3);\n    transition: opacity 0.3s ease, transform 0.3s ease;\n}\n\n.modalBackground {\n    width: 100svw;\n    height: 100svh;\n    position: fixed;\n    background-color: rgba(0, 0, 0, 0.6);\n}\n\n.modalContainer {\n    width: 80%;\n    height: 80%;\n    background-color: white;\n    position: relative;\n    border-radius: 12px;\n    padding: 20px 10px;\n}\n\n.modalContentArea {\n    width: 100%;\n    height: 100%;\n}\n\n.taskArea {\n    height: 90%;\n    display: flex;\n    flex-direction: column;\n    gap: 2px;\n    overflow-y: scroll;\n}\n\n.taskInputRow {\n    display: flex;\n}\n\n.taskTextInputNew, .taskTextInputExisting {\n    background: none;\n    width: 60%;\n}\n\n.taskDueDateInput, .taskDueDateInputExisting {\n    background: none;\n    text-align: center;\n}\n\n.taskInputRow, .projectCardTaskRow, .quickTaskRow {\n    transition: background-color 0.3s ease; /* smooth transition */\n    border-left: 4px solid #00000000;\n    padding-left: 2px;\n}\n\n/* .priorityNo {\n background-color: rgba(0, 0, 0, 0.041);\n border-left: 4px solid #00000036;\n} */\n\n.priorityLow {\n  background-color: #e0f2fe; \n  border-left: 4px solid #3b82f6; \n}\n\n.priorityMedium { \n  background-color: #fef3c7; \n  border-left: 4px solid #f59e0b;\n}\n\n.priorityHigh { \n  background-color: #fee2e2; \n  border-left: 4px solid #ef4444;\n}\n\n.prioritySelector {\n    display: flex; \n    gap: 8px;\n    align-items: center;\n}\n\n.priorityCircle {\n    width: 24px;   \n    height: 24px;\n    border-radius: 50%; \n    border: 2px solid #ccc;\n    background-color: white;\n    cursor: pointer;\n    transition: background-color 0.2s ease, border-color 0.2s ease; \n    box-sizing: border-box; \n}\n\n.priorityCircle:hover,\n.priorityCircle:focus {\n    border-color: #888;\n    outline: none; \n}\n\n.priorityCircle.isFilled {\n    background-color: #555; \n    border-color: #555;\n}\n\n.isVisible {\n    display: flex;\n}\n\n.isFadedIn {\n    opacity: 1;\n    transform: scale(1);\n}\n\n.exitButton {\n    position: absolute;\n    right: 10px;\n    top: 10px;\n    width: 30px;\n    height: 30px;\n    background-color: rgba(128, 128, 128, 0.50);\n    font-size: 1.5rem;\n    color: #333;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 10;\n}\n\n.exitButton:hover {\n    color: #000;\n    background-color: rgba(128, 128, 128, 0.70);\n}\n\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 200,\n  'GRAD' 0,\n  'opsz' 24\n}\n\n*::-webkit-scrollbar {\n    background: none;\n    width: 8px;\n    height: 5px;\n}\n\n*::-webkit-scrollbar-thumb {\n    background-color: rgba(0, 0, 0, 0.39);\n    border-radius: 5px;\n}\n\n*::-webkit-scrollbar-thumb:hover {\n  background-color: #555; /* Darken thumb on hover */\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,SAAS;IACT,SAAS;IACT,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,cAAc;IACd,yBAAyB;IACzB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,UAAU;IACV,WAAW;IACX,aAAa;IACb,kCAAkC;IAClC,aAAa;IACb,QAAQ;IACR,mBAAmB;IACnB,mBAAmB;IACnB,2CAA2C;IAC3C,gBAAgB;AACpB;;AAEA;IACI,UAAU;IACV,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,WAAW;IACX,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;IAChB,iBAAiB;IACjB,2BAA2B;IAC3B,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,WAAW;IACX,gBAAgB;IAChB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,oBAAoB;AACxB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,UAAU;IACV,WAAW;IACX,aAAa;IACb,qCAAqC;IACrC,SAAS;IACT,kBAAkB;IAClB,wBAAwB;AAC5B;;AAEA;IACI,WAAW;IACX,UAAU;IACV,kBAAkB;IAClB,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,qBAAqB;IACrB,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,QAAQ;AACZ;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;IACjB;AACJ;AACA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,kBAAkB;IAClB,eAAe;IACf,YAAY;IACZ,WAAW;IACX,kCAAkC;IAClC,YAAY;IACZ,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,2BAA2B;IAC3B,uBAAuB;IACvB,mBAAmB;IACnB,2CAA2C;AAC/C;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yCAAyC;IACzC,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,YAAY;IACZ,mBAAmB;IACnB,2CAA2C;IAC3C,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,oBAAoB;AACxB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,2BAA2B;IAC3B,wBAAwB;AAC5B;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,YAAY;IACZ,gBAAgB;IAChB,WAAW;IACX,0BAA0B;AAC9B;;AAEA;IACI,6BAA6B;IAC7B,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,oCAAoC;IACpC,mBAAmB;IACnB,UAAU;IACV,aAAa;IACb,UAAU;AACd;;AAEA;IACI,aAAa;IACb,cAAc;IACd,aAAa;IACb,sBAAsB;IACtB,eAAe;IACf,OAAO;IACP,MAAM;IACN,UAAU;IACV,uBAAuB;IACvB,mBAAmB;IACnB,UAAU;IACV,qBAAqB;IACrB,kDAAkD;AACtD;;AAEA;IACI,aAAa;IACb,cAAc;IACd,eAAe;IACf,oCAAoC;AACxC;;AAEA;IACI,UAAU;IACV,WAAW;IACX,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB,UAAU;AACd;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,sCAAsC,EAAE,sBAAsB;IAC9D,gCAAgC;IAChC,iBAAiB;AACrB;;AAEA;;;GAGG;;AAEH;EACE,yBAAyB;EACzB,8BAA8B;AAChC;;AAEA;EACE,yBAAyB;EACzB,8BAA8B;AAChC;;AAEA;EACE,yBAAyB;EACzB,8BAA8B;AAChC;;AAEA;IACI,aAAa;IACb,QAAQ;IACR,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,sBAAsB;IACtB,uBAAuB;IACvB,eAAe;IACf,8DAA8D;IAC9D,sBAAsB;AAC1B;;AAEA;;IAEI,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,SAAS;IACT,WAAW;IACX,YAAY;IACZ,2CAA2C;IAC3C,iBAAiB;IACjB,WAAW;IACX,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,WAAW;IACX,2CAA2C;AAC/C;;AAEA;EACE;;;;;AAKF;;AAEA;IACI,gBAAgB;IAChB,UAAU;IACV,WAAW;AACf;;AAEA;IACI,qCAAqC;IACrC,kBAAkB;AACtB;;AAEA;EACE,sBAAsB,EAAE,0BAA0B;AACpD\",\"sourcesContent\":[\"* {\\n    margin: 0;\\n    border: 0;\\n    box-sizing: border-box;\\n    font-family: Roboto;\\n}\\n\\nbody {\\n    width: 100svw;\\n    height: 100svh;\\n    background-color: #dddedf;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: center;\\n    row-gap: 1rem;\\n    position: relative;\\n}\\n\\n.taskView {\\n    width: 90%;\\n    height: 40%;\\n    display: flex;\\n    background-color: hsl(0, 0%, 100%);\\n    padding: 10px;\\n    gap: 5px;\\n    color: rgb(0, 0, 0);\\n    border-radius: 12px;\\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.07);\\n    overflow: hidden;\\n}\\n\\n.viewLeft, .viewRight {\\n    width: 50%;\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n.todaysTasks, .upcomingTasks, .overdueTasks {\\n    width: 100%;\\n    height: 80%;\\n    overflow-y: scroll;\\n    padding: 5px 10px 5px 0px;\\n    font-weight: 400;\\n    font-size: 0.8rem;\\n    color: rgba(0, 0, 0, 0.459);\\n    display: flex;\\n    flex-direction: column;\\n    gap: 5px;\\n}\\n\\n.quickTaskRow {\\n    font-size: 1rem;\\n    color: black;\\n}\\n\\n.todaysTasks .quickTaskCheckBox {\\n    width: 1rem;\\n}\\n\\n.viewLeft {\\n    border-right: 2px solid black;\\n}\\n\\n.viewRight {\\n    display: flex;\\n    flex-direction: column;\\n    padding-left: 2px;\\n}\\n\\n.upcoming, .overdue {\\n    width: 100%;\\n    height: 50%;\\n    padding-top: 5px;\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n.quickTaskRow {\\n    display: flex;\\n    padding: 0 5px 0 5px;\\n}\\n\\n.quickTaskCheckBox {\\n    margin-right: 5px;\\n}\\n\\n#projectFolder {\\n    width: 90%;\\n    height: 50%;\\n    display: grid;\\n    grid-template-columns: repeat(3, 1fr);\\n    gap: 1rem;\\n    overflow-y: scroll;\\n    padding: 8px 0px 8px 8px;\\n}\\n\\n.footer {\\n    width: 100%;\\n    height: 5%;\\n    position: absolute;\\n    bottom: 0px;\\n    padding-left: 50px;\\n    display: flex;\\n    align-items: flex-end;\\n    gap: 10px;\\n    padding-bottom: 2px;\\n}\\n\\n.circleLegend {\\n    border: 1px solid white;\\n    border-radius: 50%;\\n    width: 0.8rem;\\n    height: 0.8rem;\\n    background-color: white;\\n}\\n\\n.wrap {\\n    display: flex;\\n    gap: 5px;\\n}\\n\\n.lowPrio {\\n    background-color: #3b82f6;\\n}\\n\\n.medPrio {\\n    background-color: #f59e0b;\\n}\\n\\n.highPrio {\\n    background-color: #ef4444;\\n}\\n\\n.legendText {\\n    font-size: 0.8rem;\\n    color: rgba(0, 0, 0, 0.555)\\n}\\n.addButtonHome {\\n    width: 100px;\\n    height: 100px;\\n    display: none;\\n    border-radius: 50%;\\n    position: fixed;\\n    bottom: 20px;\\n    right: 10px;\\n    background-color: rgb(136, 78, 78);\\n    color: white;\\n    justify-content: center;\\n    align-items: center;\\n    z-index: 1000;\\n}\\n\\n.addButton {\\n    width: auto;\\n    height: 200px;\\n    color: rgba(0, 0, 0, 0.445);\\n    background-color: white;\\n    border-radius: 12px;\\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.07);\\n}\\n\\n#centerButton {\\n    width: 100%;\\n    height: 100%;\\n    background-color: rgba(17, 40, 82, 0.466);\\n    grid-area: 1 / 1 / 2 / -1;\\n}\\n\\n.projectCard {\\n    width: auto;\\n    height: 200px;\\n    background-color: white;\\n    position: relative;\\n    padding: 5px;\\n    border-radius: 12px;\\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.07);\\n    padding: 8px;\\n    overflow: hidden;\\n}\\n\\n.projectCardTaskList {\\n    height: 75%;\\n    overflow-y: scroll;\\n    overflow-x: hidden;\\n    display: flex;\\n    flex-direction: column;\\n    gap: 5px;\\n}\\n\\n.projectCardCompletedTasks {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 5px;\\n}\\n\\n.projectCardTitle {\\n    font-weight: 600;\\n    margin-bottom: 10px;\\n}\\n\\n.projectCardTaskRow {\\n    display: flex;\\n    pointer-events: none;\\n}\\n\\n.projectCardCheckbox {\\n    margin-right: 5px;\\n}\\n\\n.projectCardCheckbox, .projectCardTaskContent, .projectCard label {\\n    pointer-events: auto;\\n}\\n\\n.noTasksMessage {\\n    font-size: 0.8rem;\\n    font-weight: 400;\\n    color: rgba(0, 0, 0, 0.459);\\n    padding: 3px 0px 0px 2px;\\n}\\n\\n.toggleCompletedBtn {\\n    position: absolute;\\n    left: 10px;\\n    bottom: 10px;\\n    background: none;\\n    color: grey;\\n    text-decoration: underline;\\n}\\n\\n.completed {\\n    text-decoration: line-through;\\n    color: #777;\\n}\\n\\n.trashButton {\\n    position: absolute;\\n    right: 20px;\\n    bottom: 10px;\\n    background-color: rgb(253, 166, 166);\\n    border-radius: 10px;\\n    padding: 0;\\n    display: flex;\\n    color: red;\\n}\\n\\n.modal {\\n    width: 100svw;\\n    height: 100svh;\\n    display: none;\\n    flex-direction: column;\\n    position: fixed;\\n    left: 0;\\n    top: 0;\\n    z-index: 1;\\n    justify-content: center;\\n    align-items: center;\\n    opacity: 0;\\n    transform: scale(0.3);\\n    transition: opacity 0.3s ease, transform 0.3s ease;\\n}\\n\\n.modalBackground {\\n    width: 100svw;\\n    height: 100svh;\\n    position: fixed;\\n    background-color: rgba(0, 0, 0, 0.6);\\n}\\n\\n.modalContainer {\\n    width: 80%;\\n    height: 80%;\\n    background-color: white;\\n    position: relative;\\n    border-radius: 12px;\\n    padding: 20px 10px;\\n}\\n\\n.modalContentArea {\\n    width: 100%;\\n    height: 100%;\\n}\\n\\n.taskArea {\\n    height: 90%;\\n    display: flex;\\n    flex-direction: column;\\n    gap: 2px;\\n    overflow-y: scroll;\\n}\\n\\n.taskInputRow {\\n    display: flex;\\n}\\n\\n.taskTextInputNew, .taskTextInputExisting {\\n    background: none;\\n    width: 60%;\\n}\\n\\n.taskDueDateInput, .taskDueDateInputExisting {\\n    background: none;\\n    text-align: center;\\n}\\n\\n.taskInputRow, .projectCardTaskRow, .quickTaskRow {\\n    transition: background-color 0.3s ease; /* smooth transition */\\n    border-left: 4px solid #00000000;\\n    padding-left: 2px;\\n}\\n\\n/* .priorityNo {\\n background-color: rgba(0, 0, 0, 0.041);\\n border-left: 4px solid #00000036;\\n} */\\n\\n.priorityLow {\\n  background-color: #e0f2fe; \\n  border-left: 4px solid #3b82f6; \\n}\\n\\n.priorityMedium { \\n  background-color: #fef3c7; \\n  border-left: 4px solid #f59e0b;\\n}\\n\\n.priorityHigh { \\n  background-color: #fee2e2; \\n  border-left: 4px solid #ef4444;\\n}\\n\\n.prioritySelector {\\n    display: flex; \\n    gap: 8px;\\n    align-items: center;\\n}\\n\\n.priorityCircle {\\n    width: 24px;   \\n    height: 24px;\\n    border-radius: 50%; \\n    border: 2px solid #ccc;\\n    background-color: white;\\n    cursor: pointer;\\n    transition: background-color 0.2s ease, border-color 0.2s ease; \\n    box-sizing: border-box; \\n}\\n\\n.priorityCircle:hover,\\n.priorityCircle:focus {\\n    border-color: #888;\\n    outline: none; \\n}\\n\\n.priorityCircle.isFilled {\\n    background-color: #555; \\n    border-color: #555;\\n}\\n\\n.isVisible {\\n    display: flex;\\n}\\n\\n.isFadedIn {\\n    opacity: 1;\\n    transform: scale(1);\\n}\\n\\n.exitButton {\\n    position: absolute;\\n    right: 10px;\\n    top: 10px;\\n    width: 30px;\\n    height: 30px;\\n    background-color: rgba(128, 128, 128, 0.50);\\n    font-size: 1.5rem;\\n    color: #333;\\n    cursor: pointer;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    z-index: 10;\\n}\\n\\n.exitButton:hover {\\n    color: #000;\\n    background-color: rgba(128, 128, 128, 0.70);\\n}\\n\\n.material-symbols-outlined {\\n  font-variation-settings:\\n  'FILL' 0,\\n  'wght' 200,\\n  'GRAD' 0,\\n  'opsz' 24\\n}\\n\\n*::-webkit-scrollbar {\\n    background: none;\\n    width: 8px;\\n    height: 5px;\\n}\\n\\n*::-webkit-scrollbar-thumb {\\n    background-color: rgba(0, 0, 0, 0.39);\\n    border-radius: 5px;\\n}\\n\\n*::-webkit-scrollbar-thumb:hover {\\n  background-color: #555; /* Darken thumb on hover */\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./src/styles.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzP2FmMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/sourceMaps.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertBySelector.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcz9kZTZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertStyleElement.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzP2U0NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleDomAPI.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzPzFkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleTagTransform.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles.css */ \"./src/styles.css\");\n/* harmony import */ var _project_template__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./project-template */ \"./src/project-template.js\");\n\n\n\n(0,_project_template__WEBPACK_IMPORTED_MODULE_1__.loadApp)();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7O0FBQXNCO0FBQ3VCOztBQUU3QywwREFBTyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4vc3R5bGVzLmNzc1wiO1xuaW1wb3J0IHsgbG9hZEFwcCB9IGZyb20gXCIuL3Byb2plY3QtdGVtcGxhdGVcIjtcblxubG9hZEFwcCgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/modal-ui.js":
/*!*************************!*\
  !*** ./src/modal-ui.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   openModalForExistingProject: () => (/* binding */ openModalForExistingProject),\n/* harmony export */   openModalForNewProj: () => (/* binding */ openModalForNewProj),\n/* harmony export */   saveAndUpdateModalData: () => (/* binding */ saveAndUpdateModalData),\n/* harmony export */   setPriorityStyle: () => (/* binding */ setPriorityStyle),\n/* harmony export */   showModal: () => (/* binding */ showModal)\n/* harmony export */ });\n/* harmony import */ var _project_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./project-data */ \"./src/project-data.js\");\n/* harmony import */ var _project_template__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./project-template */ \"./src/project-template.js\");\n\n\n\nconst modal = document.querySelector(\".modal\");\nconst modalContentArea = modal ? modal.querySelector(\".modalContentArea\") : null;\nconst exitButton = modal ? modal.querySelector(\".exitButton\") : null;\nconst modalBackground = modal ? modal.querySelector(\".modalBackground\") : null;\n\nlet currentProjIdForModal = null; // initialize to null on open\n\n// --- Debounce Utility (Optional but recommended for blur saves) ---\nfunction debounce(func, delay) {\n    let timeout;\n    return function (...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args), delay);\n    };\n}\n\n// Make modal visible\nfunction showModal() {\n    // debugging for missing modal\n    if (!modal) {\n        console.error(\"Modal element not found.\");\n        return\n    }\n\n    modal.classList.add(\"isVisible\");\n    requestAnimationFrame(() => {\n        modal.classList.add(\"isFadedIn\");\n    });\n}\n\n// Hide modal visually, reset contents\nfunction hideModal() {\n    if (!modal || !modal.classList.contains(\"isVisible\")) {\n        return; // Modal is not visible\n    }\n\n    modal.classList.remove(\"isFadedIn\"); // Trigger fade-out animation\n\n    // Custom-event to signal modal closure for use in\n    // displaying the addHomeButton in project-template\n    const modalClosedEvent = new CustomEvent('modalHasClosed', {\n        bubbles: true, // So the event bubbles up the DOM Tree\n        composed: true // allows event to cross DOM boundaries\n    });\n\n    modal.dispatchEvent(modalClosedEvent);\n    console.log(\"modalHasClosed event dispatched.\")\n\n    const handleAnimationEnd = () => {\n        modal.classList.remove(\"isVisible\");\n\n        if (modalContentArea) {\n            // clear the content of the modal on exit\n            modalContentArea.innerHTML = '';\n        }\n\n        currentProjIdForModal = null; // reset project id to null\n        modal.removeEventListener(\"transitionend\", handleAnimationEnd); // Remove event-listener\n    };\n\n    // Re-add event listener when transition (fade out) finishes\n    modal.addEventListener(\"transitionend\", handleAnimationEnd, { once: true })\n}\n\n\n\n// if exitButton exists, attach listener for hiding the modal and saving the project details\nif (exitButton) {\n    exitButton.addEventListener(\"click\", () => {\n        saveAndUpdateModalData();\n        hideModal();\n        (0,_project_template__WEBPACK_IMPORTED_MODULE_1__.renderAllProjectCards)();\n    });\n} else if (modal) {\n    console.warn(\"Modal not found.\");\n}\n\n// if you click outside the modal area (like the background), hideModal and save the project\nif (modalBackground) {\n    modalBackground.addEventListener(\"click\", () => {\n        saveAndUpdateModalData();\n        hideModal();\n        (0,_project_template__WEBPACK_IMPORTED_MODULE_1__.renderAllProjectCards)();\n    })\n} else {\n    console.error(\"Modal not visible.\");\n}\n\n// Sets the initial priority for a task\nfunction initializeExistingPrioritySelector(selectorElement, initialPriority = 0, onChangeCallback) {\n    // selectorElement -> prioritySelector container for task\n    if (!selectorElement) {\n        console.error(\"Priority selector element not provided for initialization.\");\n        return;\n    }\n\n    // get a list of nodes of the circle elements\n    const circles = selectorElement.querySelectorAll(\".priorityCircle\");\n\n    // Updates visual state of the circles\n    const updateVisualState = (newSelectedPriority) => {\n        circles.forEach(circle => {\n            const circleValue = parseInt(circle.dataset.priorityValue, 10);\n            // if the priority value of the circle is less than the priority value of the task,\n            // shade the circle\n            if (circleValue <= newSelectedPriority) {\n                circle.classList.add(\"isFilled\");\n                circle.setAttribute(\"aria-checked\", \"true\");\n            // if it is higher than set priority, unshade it\n            } else {\n                circle.classList.remove(\"isFilled\");\n                circle.setAttribute(\"aria-checked\", \"false\");\n            }\n        });\n    };\n\n    // Set initial state (if none, set to 0)\n    updateVisualState(initialPriority);\n\n    // Adds listener to container to observe circle clicks\n    const handleInteraction = (targetElement) => {\n        if (targetElement && targetElement.classList.contains(\"priorityCircle\")) {\n            // takes the priority value and updates the visual state\n            // (fills the appropriate number of circles)\n            const originalPriority = parseInt(selectorElement.dataset.currentPriority || initialPriority, 10) || 0;\n            const clickedPriority = parseInt(targetElement.dataset.priorityValue, 10);\n\n            console.log(`originalPriority is ${originalPriority}.`);\n            // If the same priority circle is clicked, resets priority to 0\n            // if not, set to the clickedPriority value\n            const newPriority = (clickedPriority === originalPriority) ? 0 : clickedPriority;\n\n            updateVisualState(newPriority); // Update the visual state to reflect proper level\n            selectorElement.dataset.currentPriority = newPriority; // store current priority state on the priority container\n\n            if (typeof onChangeCallback === \"function\") {\n                onChangeCallback(newPriority); // Notify about changes made\n            }\n        }\n    };\n\n    selectorElement.addEventListener(\"click\", (event) => {\n        // when any of the circles are clicked,\n        // handleInteraction:\n        // 1. takes the priority value of the circle\n        // 2. updates the visual state of the priority circles\n        handleInteraction(event.target);\n    });\n\n    selectorElement.addEventListener(\"keydown\", (event) => {\n        // when any of the circles are focused,\n        // and enter key is pressed -> handleInteraction:\n        // 1. takes the priority value of the circle\n        // 2. updates the visual state of the priority circles\n        if (event.target.classList.contains(\"priorityCircle\") && (event.key === \"Enter\" || event.key === \" \")) {\n            event.preventDefault();\n            handleInteraction(event.target);\n        }\n    });\n\n    // adds a new METHOD that updates selector without\n    // interacting with the element (data changes observed)\n    selectorElement.updateDisplay = (newPriority) => {\n        updateVisualState(newPriority);\n        selectorElement.dataset.currentPriority = initialPriority; // set initial priority for priority container (for comparison on toggle)\n    };\n}\n\n// Adds a complete task item set to the tasks container\nfunction addTaskInputRow(containerElement) {\n    if (!containerElement) return;\n\n    // format for a new task row\n    const taskRowHtml = `\n                    <div class=\"taskInputRow\" data-task-id=\"\" data-completed=\"false\" data-priority=\"0\" data-due-date=\"\">\n                        <input type=\"checkbox\" class=\"taskCheckBoxNew\" aria-label=\"Mark task complete\">\n                        <input type=\"text\" class=\"taskTextInputNew\" placeholder=\"add task...\">\n                        <div class=\"prioritySelector\" aria-label=\"Task priority\">\n                            <span class=\"priorityCircle\" data-priority-value=\"1\" role=\"button\" tabindex=\"0\" aria-label=\"Set priority to 1: Low\"></span>\n                            <span class=\"priorityCircle\" data-priority-value=\"2\" role=\"button\" tabindex=\"0\" aria-label=\"Set priority to 2: Medium\"></span>\n                            <span class=\"priorityCircle\" data-priority-value=\"3\" role=\"button\" tabindex=\"0\" aria-label=\"Set priority to 3: High\"></span>\n                        </div>\n                        <input type=\"date\" class=\"taskDueDateInput\" aria-label=\"Task due date\">\n                        <button class=\"taskDelete\">x</button>\n                    </div>\n    `;\n\n    // inserts a new task row set into the modal task area\n    containerElement.insertAdjacentHTML('afterbegin', taskRowHtml);\n\n    // selects the newly created task row \n    const newRowElement = containerElement.querySelector(\".taskInputRow:first-child\");\n\n    // selects priority circles container for the task\n    const prioritySelectorElement = newRowElement.querySelector(\".prioritySelector\");\n    if (prioritySelectorElement) {\n        // set event listeners and initial priority state for the entire task row\n        initializeExistingPrioritySelector(prioritySelectorElement, 0, (newPriority) => {\n            console.log(`Priority for a task in a new row was set to: ${newPriority}`);\n            // sets the dataset property of\n            // the ENTIRE ROW (the task item) to have \n            // selectedPriority\n            newRowElement.dataset.priority = newPriority;\n\n            setPriorityStyle(newRowElement, newPriority);\n            debouncedSave(); // *IMPT: call debouncedSave here to save the change in priority\n        })\n    }\n\n    // set event listener for checked status\n    const newCheckBox = newRowElement.querySelector(\".taskCheckBoxNew\");\n    if (newCheckBox) {\n        newCheckBox.addEventListener(\"change\", (event) => {\n            newRowElement.dataset.completed = event.target.checked;\n        });\n    }\n\n    // set event listener for value changes for DATE input\n    const newDueDateInput = newRowElement.querySelector(\".taskDueDateInput\");\n    if (newDueDateInput) {\n        newDueDateInput.addEventListener(\"change\", (event) => {\n            newRowElement.dataset.dueDate = event.target.value; // date stored in \"YYYY-MM-DD\" or \"\" format\n        })\n    }\n\n    // set event listener to delete taskInputRow with delete button\n    // update the project to remove the selected task\n    const deleteButton = newRowElement.querySelector(\".taskDelete\");\n    if (deleteButton) {\n        deleteButton.addEventListener(\"click\", () => {\n            newRowElement.remove();\n            console.log(\"Task deleted from UI.\");\n\n            // If project has already been created and saved; need to update project\n            if (currentProjIdForModal !== null) {\n\n                if (!containerElement) {\n                    console.log(\"Could not find task area container to re-collect and update tasks.\");\n                    return;\n                }\n\n                const taskObjects = [];\n                const remainingTaskRowElements = containerElement.querySelectorAll(\".taskInputRow\");\n\n                if (remainingTaskRowElements.length === 0) {\n                    // If no rows are left at all, add a new one\n                    console.log(\"No task rows left. Adding a new empty task row.\");\n                    addTaskInputRow(containerElement);\n                } else {\n                    // check if empty row exists\n                    const hasAnEmptyInputRow = Array.from(remainingTaskRowElements).some(rowEl => {\n                        // selects the taskTextInput in each row\n                        const textInput = rowEl.querySelector(\".taskTextInputNew\");\n                        // check if the value of the text input is empty\n                        return textInput && textInput.value.trim() === \"\";\n                    });\n\n                    if (!hasAnEmptyInputRow) {\n                        // Adds empty task row if all tasks have text values\n                        console.log(\"All remaining task rows have text. Adding a new empty one.\");\n                        addTaskInputRow(containerElement);\n                    } else {\n                        console.log(\"An empty task input row already exists. Not adding another.\");\n                    }\n                }\n\n                // Handles re-populating the task objects list with the remaining task elements\n                remainingTaskRowElements.forEach((rowEl, index) => {\n                    const textInput = rowEl.querySelector(\".taskTextInputNew\");\n                    const taskText = textInput ? textInput.value.trim() : \"\";\n\n                    if (taskText) { // Only include tasks that have text\n                        const isCompleted = rowEl.dataset.completed === 'true';\n                        // Ensure you are reading the correct dataset attribute for priority\n                        const priority = parseInt(rowEl.dataset.priority || rowEl.dataset.selectedPriority, 10) || 0;\n                        const dueDateValue = rowEl.dataset.dueDate;\n\n                        taskObjects.push({\n                            // retain taskId for retained tasks\n                            id: rowEl.dataset.taskId || `task_${currentProjIdForModal}_temp_${index}_${Date.now()}`, // Temporary ID if old one isn't set on row\n                            text: taskText,\n                            completed: isCompleted,\n                            priority: priority,\n                            dueDate: dueDateValue || null\n                        });\n                    }\n                });\n\n                console.log(`Updating project ${currentProjIdForModal} after task deletion. New task list:`, taskObjects);\n                // Now call updateProject with the newly formed list of tasks\n                (0,_project_data__WEBPACK_IMPORTED_MODULE_0__.updateProject)(currentProjIdForModal, { tasks: taskObjects });\n            } else {\n                // If currentProjIdForModal is null, the project hasn't been created yet.\n                // Simply removing the row from the DOM is enough.\n                // The main save (handleSaveNewProject) will later collect tasks from remaining rows.\n                console.log(\"Task row removed from UI before initial project save. Data will be correct on save.\");\n            }\n        });\n    }\n    return newRowElement;\n}\n\n\n// Handles general save mechanics\nfunction saveAndUpdateModalData() {\n    if (!modalContentArea) {\n        console.error(\"Modal content area not found. Cannot save.\");\n        return false;\n    }\n\n    // Get's project title element (p or input)\n    const titleElement = modalContentArea.querySelector(\".titleText\") || // if openModalForExistingProject\n    modalContentArea.querySelector(\".titleInput\"); // if openModalForNewProj\n\n    // if no title, display warning\n    if (!titleElement) {\n        console.warn(\"No title element found in modal.\")\n    }\n\n    // takes title value from title element\n    let currentProjectTitle = \"\";\n    if (titleElement) {\n        // if it's an input element, take VALUE\n        if (titleElement.tagName === \"INPUT\" || titleElement.tagName === \"TEXTAREA\") {\n            currentProjectTitle = titleElement.value.trim();\n        \n        // if it's a p element (existing title)\n        } else {\n            currentProjectTitle = titleElement.textContent.trim();\n        }\n    }\n\n    // Collect Task Objects from all .taskInputRow elements\n    const taskObjects = [];\n    const taskRowElements = modalContentArea.querySelectorAll(\".taskInputRow\");\n\n    taskRowElements.forEach((rowEl, index) => {\n        // Query for task text input (could be .taskTextInputNew or .taskTextInputExisting)\n        const textInput = rowEl.querySelector(\".taskTextInputNew\") || // for newly-added tasks\n         rowEl.querySelector(\".taskTextInputExisting\"); // for previously input tasks \n\n        // grabs text value of the task\n        const taskText = textInput ? textInput.value.trim() : \"\";\n\n        if (taskText) { // Only process rows that have task text\n            const checkbox = rowEl.querySelector(\".taskCheckBoxNew\") || rowEl.querySelector(\".taskCheckBoxExisting\");\n            // if checkbox exists, grab completed value (true or false)\n            const isCompleted = checkbox ? checkbox.checked : (rowEl.dataset.completed === 'true');\n\n            // Priority and Due Date are read from dataset attributes,\n            // which should be updated by their respective UI components' event listeners.\n            const priority = parseInt(rowEl.dataset.priority || rowEl.dataset.selectedPriority, 10) || 0; // Handle both dataset names for now\n            // if task has existing due date input, get that value\n            const dateInputInRow = rowEl.querySelector(\".taskDueDateInputExisting\") || rowEl.querySelector(\".taskDueDateInput\");\n            const dueDateValue = dateInputInRow ? dateInputInRow.value : rowEl.dataset.dueDate;\n\n            const existingTaskId = rowEl.dataset.taskId; // Will be present for tasks loaded for an existing project, or after first save for new tasks\n\n            taskObjects.push({\n                id: existingTaskId || `task_new_${Date.now()}_${index}`, // Use existing ID, or generate a new one for truly new tasks\n                text: taskText,\n                completed: isCompleted,\n                priority: priority,\n                dueDate: dueDateValue || null // Ensure empty string from date input becomes null\n            });\n        }\n    });\n    console.log(\"Gathered task objects for save/update:\", JSON.stringify(taskObjects, null, 2));\n\n    // Save/Update Logic\n    if (currentProjIdForModal === null) { // CREATING A NEW PROJECT\n        // Only create if there's a title or at least one task\n        if (!currentProjectTitle && taskObjects.length === 0) {\n            console.log(\"New project: Empty title and no tasks. Not creating.\");\n            return false;\n        }\n\n        const effectiveTitle = currentProjectTitle || \"Untitled Project\";\n        const createdProject = (0,_project_data__WEBPACK_IMPORTED_MODULE_0__.newProject)(effectiveTitle); // from project-data.js\n\n        if (createdProject && createdProject.id !== undefined) {\n            currentProjIdForModal = createdProject.id; // CRITICAL: Update module-level ID for this session\n            \n            // Update the newly created tasks with the final project ID in their task IDs\n            // And update data-task-id on the DOM rows for consistency if they are edited again in this session\n            const finalTaskObjects = taskObjects.map((task, index) => {\n                const newTaskId = task.id.startsWith(\"task_new_\") ? `task_${currentProjIdForModal}_${index}_${Date.now()}` : task.id;\n                if (taskRowElements[index]) { // Make sure the row element still exists\n                    taskRowElements[index].dataset.taskId = newTaskId; // Set persistent ID on the DOM row\n                }\n                return { ...task, id: newTaskId };\n            });\n\n            (0,_project_data__WEBPACK_IMPORTED_MODULE_0__.updateProject)(currentProjIdForModal, { tasks: finalTaskObjects });\n            console.log(`New project ${currentProjIdForModal} ('${effectiveTitle}') created and tasks updated.`);\n            (0,_project_template__WEBPACK_IMPORTED_MODULE_1__.populateQuickCards)();\n            return true;\n        } else {\n            console.error(\"Failed to create new project shell.\");\n            return false;\n        }\n        \n    } else { // UPDATING AN EXISTING PROJECT\n        let effectiveTitle;\n        if (!currentProjectTitle) {\n            effectiveTitle = \"Untitled Project\";\n        } else {\n            effectiveTitle = currentProjectTitle;\n        }\n\n        console.log(`Updating project ID: ${currentProjIdForModal} ('${effectiveTitle}')`);\n        // For existing projects, ensure new tasks added get a proper ID structure\n        const finalTaskObjectsForUpdate = taskObjects.map((task, index) => {\n             if (task.id.startsWith(\"task_new_\")) { // Task was newly added to this existing project\n                const newTaskId = `task_${currentProjIdForModal}_${index}_${Date.now()}`;\n                // If the task DOM element exists, set it's task-id property\n                if (taskRowElements[index]) {\n                    taskRowElements[index].dataset.taskId = newTaskId;\n                }\n                return { ...task, id: newTaskId };\n             }\n             return task; // Existing tasks should already have their persistent IDs\n        });\n        // Updates the project-data with current values\n        (0,_project_data__WEBPACK_IMPORTED_MODULE_0__.updateProject)(currentProjIdForModal, { title: effectiveTitle, tasks: finalTaskObjectsForUpdate });\n        (0,_project_template__WEBPACK_IMPORTED_MODULE_1__.populateQuickCards)();\n        return true;\n    }\n}\n\n// define the debounced save function\nconst debouncedSave = debounce(saveAndUpdateModalData, 300);\n\n\n// reorders the tasks in the modal task area based on completion status\n// completed tasks are pushed to the bottom while incomplete tasks are on top\nfunction reorderTasksInModal(taskAreaElement) {\n    if (!taskAreaElement) {\n        console.warn(\"Task area element not found.\");\n        return;\n    }\n\n    // select the tasks in the tasks area\n    const allTaskRows = Array.from(taskAreaElement.querySelectorAll(\".taskInputRow\"))\n\n    if (allTaskRows.length === 0) {\n        return;\n    }\n\n    const incompleteRows = [];\n    const completedRows = [];\n\n    // filter out completed and incomplete rows based on completed dataset\n    allTaskRows.forEach(rowEl => {\n        const isCompleted = (rowEl.dataset.completed === \"true\"); // reads the completed status (true or false)\n\n        if (isCompleted) {\n            completedRows.push(rowEl);\n        } else {\n            incompleteRows.push(rowEl);\n        }\n    });\n\n    // re-arrange elements with new order\n    // insert the rows BEFORE the last element (always a new input row)\n    const lastChild = taskAreaElement.lastElementChild;\n    incompleteRows.forEach(rowEl => taskAreaElement.insertBefore(rowEl, lastChild));\n    completedRows.forEach(rowEl => taskAreaElement.insertBefore(rowEl, lastChild));\n\n    console.log(\"Tasks in modal re-ordered.\")\n}\n\n// --- ATTACH EVENT LISTENERS TO THE MODAL CONTENT AREA ON LOAD ---\nif (modalContentArea) {\n    // For storing original values on focus (text inputs, date inputs)\n    modalContentArea.addEventListener('focusin', (event) => {\n        const target = event.target;\n        if (target.matches('.titleInput, .taskTextInputNew, .taskTextInputExisting, .taskDueDateInput, .taskDueDateInputExisting')) {\n            if (target.value.trim() !== \"\") {\n                target.dataset.originalValue = target.value; // stores the current value before editing when focused\n            } else {\n                target.dataset.originalValue = \"NEW_EMPTY_TASK\"\n            }\n            console.log(`FOCUSIN on [${target.className || target.id}]: Stored originalValue = \"${target.dataset.originalValue}\"`);\n        }\n    });\n\n    // For saving on blur if value changed (text inputs, date inputs)\n    modalContentArea.addEventListener('focusout', (event) => {\n        const target = event.target;\n        if (target.matches('.titleInput, .taskTextInputNew, .taskTextInputExisting, .taskDueDateInput, .taskDueDateInputExisting')) {\n            const taskRow = target.closest(\".taskInputRow\");\n            const currentValue = target.value.trim(); // gets current value\n            const originalValue = target.dataset.originalValue;\n\n            const isNewAndStillEmpty = (originalValue === \"NEW_EMPTY_TASK\" && currentValue === \"\");\n\n            if (isNewAndStillEmpty && taskRow && !taskRow.dataset.taskId) {\n                // blurred a new task row that had no text\n                console.log(\"New task input blurred while still empty. No save triggered.\")\n                return;\n            // check for changes by comparing original vs current value\n            } else if (typeof originalValue !== 'undefined' && currentValue !== originalValue && currentValue !== \"\") {\n                console.log(`Value changed for ${target.className || target.id}. New: \"${target.value}\", Old: \"${originalValue}\". Triggering save.`);\n                debouncedSave(); // call debounced save function\n            } else if (typeof originalValue !== \"undefined\" && currentValue !== originalValue && currentValue === \"\" && originalValue !== \"NEW_EMPTY_TASK\") {\n                console.log(\"Value for task row was deleted and blurred. Task row deleted and save triggered.\")\n                taskRow.remove();\n                debouncedSave();\n            } else {\n                if (typeof originalValue === 'undefined') {\n                    console.log(\"  DECISION: No changes observed (originalValue was undefined). No save triggered.\");\n                } else if (currentValue === originalValue) {\n                    console.log(\"  DECISION: No changes observed (currentValue is identical to originalValue). No save triggered.\");\n                } else {\n                    // This case should ideally not be hit if the above two cover it\n                    console.log(\"  DECISION: No changes observed (condition not met for unknown reason). No save triggered.\");\n                }\n            }\n            delete target.dataset.originalValue; // Clean up\n        }\n    });\n\n    // For checkbox changes\n    modalContentArea.addEventListener('change', (event) => {\n        const target = event.target;\n        const taskRow = target.closest('.taskInputRow');\n\n        if (target.matches('.taskCheckBoxNew, .taskCheckBoxExisting') && taskRow) {\n            // stores true if it is checked, false if not\n            const isChecked = event.target.checked;\n\n            // sets task rows completed state\n            taskRow.dataset.completed = target.checked;\n            console.log(`Checkbox for task row changed. Triggering save.`);\n            \n            const taskText = taskRow.querySelector(\".taskTextInputNew, .taskTextInputExisting\");\n            if (taskText) {\n                if (isChecked) {\n                    taskText.classList.add(\"completed\");\n                } else {\n                    taskText.classList.remove(\"completed\");\n                }\n            } else {\n                console.warn(\"could not find task element to apply or remove the completed style.\");\n            }\n\n            debouncedSave();\n\n            // reorder the tasks in the modal after checkbox change observed\n            const taskArea = target.closest(\".taskArea, .existingTaskArea\");\n\n            reorderTasksInModal(taskArea);\n        }\n    });\n\n    modalContentArea.addEventListener('keydown', (event) => {\n        const target = event.target;\n        // For Enter key on title and task text inputs to trigger blur (which then triggers save if changed)\n        if (target.matches('.titleInput, .taskTextInputNew, .taskTextInputExisting') && event.key === 'Enter') {\n            event.preventDefault();\n            target.blur();\n        }\n    });\n\n} else {\n    console.error(\"CRITICAL: modalContentArea not found. Modal UI will be non-interactive.\");\n}\n\n\n// Opens the modal and loads base inputs for creating a new project\nfunction openModalForNewProj() {\n    console.log(\"Setting up modal for a NEW project...\");\n    currentProjIdForModal = null; // reset state of modal to set up new project\n\n    // Custom-event to signal modal opening\n    // hides addHomeButton from main page view\n    const modalOpenedEvent = new CustomEvent('modalHasOpened', {\n        bubbles: true, // So the event bubbles up the DOM Tree\n        composed: true // allows event to cross DOM boundaries\n    });\n\n    modal.dispatchEvent(modalOpenedEvent);\n    console.log(\"modalHasOpened event dispatched.\")\n\n\n    // error-check for missing modal area\n    if (!modalContentArea) {\n        console.error(\"Cannot open modal: Modal Content Area doesnt exist!\");\n        return;\n    }\n\n    const newProjectHtml = `\n                <input type=\"text\" class=\"titleInput\" placeholder=\"Title\">\n                <h4>To-do:</h4>\n                <div class=\"taskArea\">\n                </div>`;\n\n    // set base elements for setting up new project (inputs)\n    modalContentArea.innerHTML = newProjectHtml;\n\n    // create references for newly created input elements\n    const titleInput = modalContentArea.querySelector(\".titleInput\");\n    const taskAreaContainer = modalContentArea.querySelector(\".taskArea\");\n\n    // adds one empty task input row on initialization of new proj\n    if (taskAreaContainer) {\n        addTaskInputRow(taskAreaContainer);\n    } else {\n        console.error(\"Task area container not found.\");\n        return; //\n    }\n\n    if (titleInput) {\n        // calls save to NEW PROJECT or update to currently opened project\n        titleInput.addEventListener(\"blur\", debouncedSave);\n        titleInput.addEventListener(\"keydown\", (event) => {\n            if (event.key === \"Enter\") {\n                event.preventDefault();\n                titleInput.blur();\n            }\n        });\n        // immediately places caret on the title input element for\n        // editing as soon as modal opens\n        requestAnimationFrame(() => titleInput.focus());\n    } else {\n        console.error(\"Could not find title input element after rendering!\");\n    }\n\n    // Handles new input row creation on successful task input confirmation\n    if (taskAreaContainer) {\n        taskAreaContainer.addEventListener('focusout', (event) => {\n            // check if an event fired from a task text input and if it is the last one in the container\n            if (event.target.classList.contains(\"taskTextInputNew\")) {\n                const currentRow = event.target.closest(\".taskInputRow\");\n                // check if currentRow is the last input row\n                if (currentRow && currentRow === taskAreaContainer.querySelector(\".taskInputRow:first-child\")) {\n                    // if user input a value into the last input, create a new input row\n                    if (event.target.value.trim() !== \"\") {\n                        addTaskInputRow(taskAreaContainer);\n                    }\n                }\n            }\n        });\n\n        taskAreaContainer.addEventListener(\"keydown\", (event) => {\n            if (event.target.classList.contains(\"taskTextInputNew\") && event.key === \"Enter\" && event.target.value.trim() !== \"\") {\n                event.preventDefault();\n                const currentRow = event.target.closest(\".taskInputRow\");\n\n                if (currentRow && currentRow === taskAreaContainer.firstElementChild) {\n                    const newRow = addTaskInputRow(taskAreaContainer);\n                    const newRowInput = newRow.querySelector(\".taskTextInputNew\");\n                    requestAnimationFrame(() => newRowInput.focus());\n                } else {\n                    event.target.blur();\n                }\n            }\n        });\n    }\n    showModal();\n}\n\n\nfunction openModalForExistingProject(projectId) {\n    const project = (0,_project_data__WEBPACK_IMPORTED_MODULE_0__.selectProjectById)(projectId);\n\n    if (!project) {\n        console.error(`Project with ID ${projectId} not found.`);\n        return;\n    }\n\n    currentProjIdForModal = projectId;\n    console.log(`Opening modal for existing project: ${project.title} (ID: ${projectId})`);\n\n    if (!modalContentArea) {\n        console.error(\"Modal Content Area not found!\");\n        return;\n    }\n\n    // Display project title (as a p) and tasks area\n    const existingProjectHtml = `\n        <p class=\"titleText\">${project.title}</p>\n                <h4>To-do:</h4>\n                <div class=\"taskArea existingTaskArea\"></div>\n    `;\n\n    modalContentArea.innerHTML = existingProjectHtml;\n\n    const taskArea = modalContentArea.querySelector(\".existingTaskArea\");\n    if (!taskArea) {\n        console.error(\".existingTaskArea not found within modal.\")\n        return;\n    }\n    \n\n    if (project.tasks && project.tasks.length > 0) {\n        project.tasks.forEach(task => {\n            // For each task object, create its HTML row\n            // Note: data-task-id is crucial here\n            const existingTasksHtml = `\n                <div class=\"taskInputRow existingTaskRow\"\n                    data-task-id=\"${task.id}\"\n                    data-completed=\"${task.completed.toString()}\"\n                    data-priority=\"${task.priority}\"\n                    data-due-date=\"${task.dueDate || ''}\">\n                        <input type=\"checkbox\" class=\"taskCheckBoxExisting\" ${task.completed ? 'checked' : ''} aria-label=\"Mark task complete\">\n                        <input type=\"text\" class=\"taskTextInputExisting\" value=\"${task.text}\" placeholder=\"add task...\">\n                        <div class=\"prioritySelector existingPrioritySelector\" aria-label=\"Task priority\">\n                            <span class=\"priorityCircle\" data-priority-value=\"1\" role=\"radio\" tabindex=\"0\" aria-label=\"Set priority to 1: Low\"></span>\n                            <span class=\"priorityCircle\" data-priority-value=\"2\" role=\"radio\" tabindex=\"0\" aria-label=\"Set priority to 2: Medium\"></span>\n                            <span class=\"priorityCircle\" data-priority-value=\"3\" role=\"radio\" tabindex=\"0\" aria-label=\"Set priority to 3: High\"></span>\n                        </div>\n                        <input type=\"date\" class=\"taskDueDateInputExisting\" value=\"${task.dueDate || ''}\" aria-label=\"Task due date\">\n                        <button class=\"taskDelete\">x</button>\n                    </div>\n                </div>\n            `;\n\n            taskArea.insertAdjacentHTML(\"beforeend\", existingTasksHtml); // append the task row to the DOM\n            const newlyAddedTaskRow = taskArea.lastElementChild; // reference the newly added task row\n            \n            // if the task row's completed dataset is \"true\", add strike-through\n            if (newlyAddedTaskRow.dataset.completed === \"true\") {\n                newlyAddedTaskRow.querySelector(\".taskTextInputNew, .taskTextInputExisting\").classList.add(\"completed\");\n            } else { // else remove strike-through\n                newlyAddedTaskRow.querySelector(\".taskTextInputNew, .taskTextInputExisting\").classList.remove(\"completed\");\n            }\n            \n            // set priority background styling \n            setPriorityStyle(newlyAddedTaskRow, task.priority);\n        });\n\n\n        // add new task input row to the end\n        addTaskInputRow(taskArea);\n    } else {\n        addTaskInputRow(taskArea);\n    }\n\n\n    // Initializing priority, completed, and date states for each task row\n    const existingTaskRows = modalContentArea.querySelectorAll(\".existingTaskRow\");\n    existingTaskRows.forEach(rowElement => {\n        const taskId = rowElement.dataset.taskId;\n        const taskData = project.tasks.find(t => t.id === taskId); // Get the specific task data\n\n        // sets delete behavior for existing text inputs; deletes the entire rowElement if blurred with no value\n        const textInput = rowElement.querySelector(\".taskTextInputExisting\");\n        if (textInput) {\n            textInput.addEventListener(\"focusin\", () => {\n                    textInput.dataset.originalValue = textInput.value; // saves the original value of the task text\n            });\n\n            textInput.addEventListener(\"blur\", () => {\n                const currentValue = textInput.value.trim();\n                const oldValue = textInput.dataset.oldValue || \"\";\n\n                // compare whether the task text was completely deleted, and whether it originally had any text value\n                if (currentValue === \"\" && (oldValue !== \"\" || rowElement.dataset.taskId)) {\n                    console.log(`Task text for task ${rowElement.dataset.taskId} was cleared. Removing from tasks list.`)\n                    rowElement.remove();\n                // if the element is a newly created task but had it's text deleted before blurring, delete the task row\n                } else if (currentValue === \"\" && (oldValue === \"\" && rowElement.nextElementSibling !== null)) {\n                    console.log(`Task text for task ${rowElement.dataset.taskId} was cleared. Removing from tasks list.`)\n                    rowElement.remove();\n                }\n\n                debouncedSave();\n                // clears the temporary property value as to not take up memory\n                delete textInput.dataset.oldValue;\n            })\n        }\n\n        // Display exisiting priorty\n        if (taskData) {\n            const prioritySelectorDiv = rowElement.querySelector(\".existingPrioritySelector\");\n            if (prioritySelectorDiv) {\n                initializeExistingPrioritySelector(prioritySelectorDiv, taskData.priority, (newPriority) => {\n                    console.log(`Priority for task ID ${taskId} changed to ${newPriority}`);\n\n                    rowElement.dataset.priority = newPriority.toString();\n\n                    // set priority background styling\n                    setPriorityStyle(rowElement, newPriority);\n\n                    // Find task in project.tasks, update its priority, then call debouncedSave\n                    const taskToUpdate = project.tasks.find(t => t.id === taskId);\n                    if (taskToUpdate) {\n                        taskToUpdate.priority = newPriority;\n                        debouncedSave();\n                    }\n                });\n            }\n\n            // set event listener to delete taskInputRow with delete button\n            // update the project to remove the selected task\n            const deleteButton = rowElement.querySelector(\".taskDelete\");\n            if (deleteButton) {\n                deleteButton.addEventListener(\"click\", (event) => {\n                    event.stopPropagation();\n                    rowElement.remove();\n                    console.log(\"Task deleted from UI.\");\n                    debouncedSave();\n\n                    // check if task area is now empty after task deletion; and addNewInputRow if it is\n                    if (taskArea) {\n                        ;\n                        if (taskArea.children.length === 0) {\n                            addTaskInputRow(taskArea);\n                        }\n                    }\n                });\n            }\n        }\n    });\n\n    // Handles new input row creation on successful task input confirmation\n    taskArea.addEventListener('input', (event) => {\n        // check if an event fired from a task text input OR existing task text input (from existing project modal)\n        // and if it is the last one in the container\n        if (event.target.classList.contains(\"taskTextInputNew\")) {\n            const currentRow = event.target.closest(\".taskInputRow\");\n            // check if currentRow is the last input row\n            if (currentRow && currentRow === taskArea.querySelector(\".taskInputRow:last-child\")) {\n                // if user input a value into the last input, create a new input row\n                if (event.target.value.trim() !== \"\") {\n                    addTaskInputRow(taskArea);\n                }\n            }\n        }\n    });\n\n    // Handles new input row creation on keydown\n    taskArea.addEventListener(\"keydown\", (event) => {\n        if (event.target.classList.contains(\"taskTextInputNew\") && event.key === \"Enter\") {\n            event.preventDefault();\n            const currentRow = event.target.closest(\".taskInputRow\");\n            // Add new row if last row OR if next row's input is empty\n            const nextRow = currentRow ? currentRow.nextElementSibling : null;\n            // is evaluated as true or false; if nextRow exists, then isLastRow is false, if it doesnt, isLastRow is true\n            const isLastRow = !nextRow;\n\n            if (isLastRow) {\n                // if the last row has a value in the input field, create a new row\n                if (currentRow.value) {\n                    addTaskInputRow(taskArea);\n                    // Focus on the new Input added\n                    const newInput = taskArea.querySelector(\".taskInputRow:last-child .taskTextInputNew\");\n                    if (newInput) requestAnimationFrame(() => newInput.focus());\n                }\n            } else if (nextRow) {\n                // Focus the next existing input if it's not empty\n                const nextInput = nextRow.querySelector(\".taskTextInputNew\");\n                if (nextInput) requestAnimationFrame(() => nextInput.focus());\n            }\n        }\n    });\n\n    // add listener for p if title already exists\n    const projectTitleP = modalContentArea.querySelector(\".titleText\");\n    if (projectTitleP) {\n\n        // Re-usable edit on-click function\n        const makeTitleEditableOnClick = (pElement) => {\n            pElement.addEventListener(\"click\", function handleClickToEdit() {\n                // Store the original title text\n                const originalTitle = pElement.textContent;\n\n                // Create the new input element\n                const titleEditInput = document.createElement('input');\n                titleEditInput.type = 'text';\n                titleEditInput.className = 'titleInput'; // Use a consistent class\n                titleEditInput.value = originalTitle;   // Pre-fill with current title\n                titleEditInput.placeholder = 'Title';\n\n                // Replace the <p> element with the new <input> element\n                if (pElement.parentNode) {\n                    pElement.parentNode.replaceChild(titleEditInput, pElement);\n                } else {\n                    // Fallback if pElement somehow lost its parent (shouldn't happen here)\n                    console.error(\"Could not replace title paragraph, parent not found.\");\n                    return;\n                }\n\n                // Automatically focus the new input field\n                titleEditInput.focus();\n                // Select the text in the input for easier editing\n                titleEditInput.select();\n\n                // function to revert back to <p> and save (if changed)\n                const saveAndRevertToP = () => {\n                    const newTitle = titleEditInput.value.trim();\n\n                    // Create the new <p> element to display the title\n                    const newP = document.createElement('p');\n                    newP.className = 'titleText'; // Re-apply original class\n                    newP.textContent = newTitle || originalTitle; // Use new title, or original if new is empty\n\n                    // Replace the input with the new <p>\n                    if (titleEditInput.parentNode) {\n                        titleEditInput.parentNode.replaceChild(newP, titleEditInput);\n                    }\n\n                    // Save the changes if the title actually changed\n                    if (newTitle && newTitle !== originalTitle) {\n                        console.log(`Title changed from \"${originalTitle}\" to \"${newTitle}\"`);\n                        project.title = newTitle; // Update the local project object\n                        // Call your debouncedSave function\n                        debouncedSave();\n                    }\n\n                    // Make the new <p> element editable again\n                    makeTitleEditableOnClick(newP);\n                };\n\n                // 5. Add event listeners to the input to save and revert\n                titleEditInput.addEventListener('blur', saveAndRevertToP);\n\n                titleEditInput.addEventListener('keydown', (event) => {\n                    if (event.key === 'Enter') {\n                        event.preventDefault(); \n                        titleEditInput.blur();    // Trigger blur to save and revert\n                    } else if (event.key === 'Escape') {\n                        // Revert to original title without saving changes\n                        const originalP = document.createElement('p');\n                        originalP.className = 'titleText';\n                        originalP.textContent = originalTitle;\n                        if (titleEditInput.parentNode) {\n                            titleEditInput.parentNode.replaceChild(originalP, titleEditInput);\n                        }\n                        makeTitleEditableOnClick(originalP); // Make it editable again\n                    }\n                });\n            }, { once: true }); // { once: true } ensures the listener is removed after first click,\n            // preventing issues if not handled carefully inside.\n            // The makeTitleEditableOnClick re-adds it to the new <p>.\n        };\n\n        // Initial call to make the title paragraph editable\n        makeTitleEditableOnClick(projectTitleP);\n    }\n\n    reorderTasksInModal(taskArea);\n\n    showModal();\n}\n\nfunction setPriorityStyle(rowElement, priority) {\n    if (!rowElement) return;\n\n    // remove existing priority class styles\n    rowElement.classList.remove(\"priorityNo\", \"priorityLow\", \"priorityMedium\", \"priorityHigh\");\n\n    if (priority === 1) {\n        rowElement.classList.add('priorityLow');\n    } else if (priority === 2) {\n        rowElement.classList.add('priorityMedium');\n    } else if (priority === 3) {\n        rowElement.classList.add('priorityHigh');\n    } else {\n        rowElement.classList.add('priorityNo'); // commented style out\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modal-ui.js\n");

/***/ }),

/***/ "./src/project-data.js":
/*!*****************************!*\
  !*** ./src/project-data.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAllProjects: () => (/* binding */ getAllProjects),\n/* harmony export */   loadProjects: () => (/* binding */ loadProjects),\n/* harmony export */   logAllProjects: () => (/* binding */ logAllProjects),\n/* harmony export */   newProject: () => (/* binding */ newProject),\n/* harmony export */   removeProject: () => (/* binding */ removeProject),\n/* harmony export */   selectProjectById: () => (/* binding */ selectProjectById),\n/* harmony export */   updateProject: () => (/* binding */ updateProject)\n/* harmony export */ });\nlet projects = []; // initialize projects array to store project objects\nlet currentProjId = 0; // initialize id number of projects\n\nfunction loadProjects() {\n    const storedProjects = localStorage.getItem('projects');\n    console.log(\"Loading projects...\");\n\n    // if storedProjects exists\n    if (storedProjects) {\n        try {\n            let parsedProjects = JSON.parse(storedProjects);\n            console.log(\"Parsed from local storage:\", parsedProjects);\n\n            // Iterate over projects and ensure task structure and defaults\n            projects = parsedProjects.map(project => {\n\n                // Backwards compatibility check for old projects intialized without tasks array\n                const tasksArray = (project.tasks && Array.isArray(project.tasks))\n                    ? project.tasks : []; // if project.tasks exists and is an array, return it\n\n                // NORMALIZES each task to be an object with the required fields\n                // catches any errors in saving task objects to ensure absolute formatting\n                const normalizedTasks = tasksArray.map((task, index) => {\n                    if (typeof task === \"object\" && task !== null) {\n                        return {\n                            id: task.id || `task_${project.id || 'proj'}_${index}_${Date.now()}`, // Robust measures to secure task ID\n                            text: task.text || \"\", // Empty string if no text included\n                            completed: typeof task.completed === \"boolean\" ? task.completed : false, // Default to false, also false if value is not a boolean\n                            priority: typeof task.priority === \"number\" ? task.priority : 0, // Default priority set to 0\n                            dueDate: task.dueDate || null // Defaults to null\n                        };\n                    }\n                });\n                // ensures isCompletedVisible exists and if not, defaults to false\n                return { ...project, tasks: normalizedTasks, isCompletedVisible: project.isCompletedVisible || false };\n            });\n\n            console.log(\"Projects after normalization:\", projects);\n\n            if (projects.length > 0) {\n                const maxId = projects.reduce((currentMax, p) => {\n                    // pId represents currentValue; the current highest id in storage, if it doesn't exist, then no projects initiated and start with -1\n                    const pId = (typeof p.id === \"number\" && !isNaN(p.id)) ? p.id : -1;\n                    return Math.max(currentMax, pId);\n                }, -1);\n                currentProjId = maxId >= 0 ? maxId + 1 : 0;\n            } else {\n                currentProjId = 0;\n            }\n            console.log(\"currentProjId set to:\", currentProjId);\n\n        } catch (e) {\n            console.error(\"Could not parse projects from localStorage\", e);\n            projects = [];\n            currentProjId = 0;\n        }\n    } else {\n        // No 'projects' key in localStorage (e.g., first-time use)\n        console.log(\"No projects found in localStorage. Initializing empty projects array.\");\n        projects = [];\n        currentProjId = 0;\n    }\n}\n\nfunction newProject(title = \"New Project\") { // set default value for title if missing\n    const newProject = {\n        id: currentProjId++, // post increment operator; set id to current value, then increment the variable in one move\n        title: title,\n        tasks: [],\n        isCompletedVisible: false // handles visibility when toggling show/hide completed\n    };\n\n    projects.push(newProject);\n    saveProjects(); // Save to local storage after creation\n    return { ...newProject}; // returns shallow object; basically replica of the object\n    // for use in the main index.js \n}\n\n// Save to local storage\nfunction saveProjects() {\n    localStorage.setItem('projects', JSON.stringify(projects));\n}\n\n// Passes the projects array to index.js\nfunction getAllProjects() {\n    return projects.map(project => ({\n        ...project,\n        tasks: [...project.tasks]        \n    })); // returns a shallow copy of the projects and their tasks array\n}\n\n// Selects and returns a project to be displayed/updated/deleted\nfunction selectProjectById(projectId) {\n    const project = projects.find(p => p.id === projectId);\n    if (project) {\n        return {...project, tasks: [...project.tasks]};\n    }\n    // return null if not found\n    return null; \n}\n\nfunction removeProject(projectId) {\n    projects = projects.filter(p => p.id !== projectId); // filter out the project from array\n    saveProjects();\n}\n\nfunction updateProject(projectId, updates) {\n    const projectIndex = projects.findIndex(p => p.id === projectId);\n\n    // if the project doesn't exist\n    if (projectIndex === -1) {\n        console.error(`Project with ID ${projectId} was not found.`);\n        return false;\n    }\n\n    // get project at projectIndex and\n    // replace it with a new object\n    // new object first copies all key/values of original object\n    // then overwrites those values with any changes in the update object\n    projects[projectIndex] = { ...projects[projectIndex], ...updates};    \n\n    saveProjects();\n    return true; // for successs indication\n}\n\n// **MODIFY DEBUGGING FUNCTION**\nfunction logAllProjects() {\n    console.log(\"--- Current Projects in Memory ---\");\n\n    if (!projects || projects.length === 0) {\n        const rawLocalStorage = localStorage.getItem('projects');\n        if (rawLocalStorage && rawLocalStorage !== \"[]\") {\n            console.log(\"The 'projects' array in memory is empty, but localStorage seems to have data.\");\n            console.log(\"Did loadProjects() run on app initialization?\");\n            console.log(\"Raw localStorage content:\", rawLocalStorage);\n        } else {\n            console.log(\"No projects found in memory (and localStorage might be empty or uninitialized).\");\n        }\n        console.log(\"--- End of Log ---\");\n        return;\n    }\n\n    console.log(`Found ${projects.length} project(s):`);\n    // console.table() provides a nice tabular format for arrays of objects\n    console.table(projects.map(p => ({...p}))); // Logging a shallow copy of each project for clarity\n\n    console.log(\"--- End of Log ---\");\n}\n\n// debugging purposes\nif (typeof window !== 'undefined') {\n    window.dev_logAllProjects = logAllProjects;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/project-data.js\n");

/***/ }),

/***/ "./src/project-template.js":
/*!*********************************!*\
  !*** ./src/project-template.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadApp: () => (/* binding */ loadApp),\n/* harmony export */   populateQuickCards: () => (/* binding */ populateQuickCards),\n/* harmony export */   renderAllProjectCards: () => (/* binding */ renderAllProjectCards),\n/* harmony export */   renderProjectCard: () => (/* binding */ renderProjectCard)\n/* harmony export */ });\n/* harmony import */ var _modal_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal-ui */ \"./src/modal-ui.js\");\n/* harmony import */ var _project_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./project-data */ \"./src/project-data.js\");\n\n\n\nconst addButtonHome = document.querySelector(\".addButtonHome\");\n\nfunction loadApp() {\n    (0,_project_data__WEBPACK_IMPORTED_MODULE_1__.loadProjects)();\n    renderAllProjectCards(); \n    populateQuickCards();\n}\n\n// creates generic button to add more projects\nfunction createAddButton() {\n    const addButton = document.createElement(\"button\");\n    addButton.classList.add(\"addButton\");\n    addButton.innerHTML = \"New To-Do<br><br>+\"\n    addButton.addEventListener(\"click\", _modal_ui__WEBPACK_IMPORTED_MODULE_0__.openModalForNewProj);\n    return addButton;\n}\n\n// creates the centerButton for adding first project\nfunction createCenterButton() {\n    const centerButton = createAddButton();\n    centerButton.id = \"centerButton\";\n    const caption = document.createElement(\"p\");\n    caption.textContent = \"Add your first to-do-note!\"\n    centerButton.insertBefore(caption, centerButton.firstChild);\n    return centerButton;\n}\n\nfunction renderAllProjectCards() {\n    const projFolder = document.querySelector(\"#projectFolder\")\n    if (!projFolder) {\n        console.error(\"Project folder container (#projectFolder) not found.\");\n        return;\n    }\n\n    // clear all project cards from folder\n    projFolder.innerHTML = '';\n\n    // get all projects\n    const allProjects = (0,_project_data__WEBPACK_IMPORTED_MODULE_1__.getAllProjects)();\n\n    // displays all projects onto the DOM\n    if (allProjects && allProjects.length > 0) {\n        allProjects.forEach(projItem => {\n            renderProjectCard(projItem);\n        });\n        const addButton = createAddButton();\n        projFolder.prepend(addButton);\n    } else {\n        const centerButton = createCenterButton();\n        projFolder.append(centerButton);\n    }\n}\n\nfunction renderProjectCard(projItem) {\n    // for labeling the project card\n    const projTitle = projItem.title;\n    // for use in selecting, updating, or deleting proj details\n    const projId = projItem.id;\n    // create a shallow copy of the project's task array\n    const tasks = [...projItem.tasks];\n\n    const projFolder = document.querySelector(\"#projectFolder\");\n\n    if (!projFolder) {\n        console.error(\"Project folder container (#projectFolder) not found.\");\n        return;\n    }\n\n    const projectCard = document.createElement(\"div\");\n    projectCard.classList.add(\"projectCard\");\n\n    // attach identifier to the projCard using it's ID\n    projectCard.dataset.projectId = projId;\n\n    const cardTitle = document.createElement(\"p\");\n    cardTitle.classList.add(\"projectCardTitle\");\n    cardTitle.textContent = projTitle;\n\n    const taskList = document.createElement(\"div\");\n    taskList.classList.add(\"projectCardTaskList\");\n\n    // Groups tasks according to their completion status to handle ordering\n    // in the taskList container\n    const incompleteTasksFragment = document.createDocumentFragment();\n    const completedTasksFragment = document.createDocumentFragment();\n\n    // create wrapper div to hold the completed tasks\n    const completedTasksContainer = document.createElement(\"div\");\n    completedTasksContainer.className = \"projectCardCompletedTasks\"\n    completedTasksContainer.style.display = \"none\"; // initially hides the completed tasks\n\n    let hasCompletedTasks = false; // checks if a project card has completed tasks in it\n\n    // if tasks exist, create task items\n    if (tasks && tasks.length > 0) {\n        tasks.forEach((task, index) => {\n            const projCardTaskRow = document.createElement(\"div\");\n            projCardTaskRow.classList.add(\"projectCardTaskRow\");\n            \n            // stops the click on items in the task area from bubbling up and triggering\n            // the openModal behavior on projCard\n            projCardTaskRow.addEventListener(\"click\", (event) => {\n                event.stopPropagation();\n            })\n\n            // set priority background styling\n            ;(0,_modal_ui__WEBPACK_IMPORTED_MODULE_0__.setPriorityStyle)(projCardTaskRow, task.priority);\n\n            const checkBox = document.createElement(\"input\")\n            checkBox.type = \"checkbox\";\n            checkBox.classList.add(\"projectCardCheckbox\");\n            checkBox.id = `${projId}-task-${index}`; // assign id per task\n            checkBox.checked = task.completed;\n\n            // Updates the project-data to reflect change in checked status\n            checkBox.addEventListener(\"change\", (event) => {\n                event.stopPropagation();\n\n                // this sets the checked state by checking the checked property of the checkBox\n                const currentCheckedState = event.target.checked;\n                const currentTaskId = task.id; \n                const currentProjId = projId;\n\n                console.log(`Task ${currentTaskId} in project ${currentProjId} completion status: ${currentCheckedState}`);\n\n                const projectToUpdate = (0,_project_data__WEBPACK_IMPORTED_MODULE_1__.selectProjectById)(currentProjId); // selects the proj to update\n                if (projectToUpdate) {\n                    const taskToUpdate = projectToUpdate.tasks.find(t => t.id === currentTaskId);\n                    if (taskToUpdate) {\n                        taskToUpdate.completed = currentCheckedState;\n                        (0,_project_data__WEBPACK_IMPORTED_MODULE_1__.updateProject)(currentProjId, { tasks: projectToUpdate.tasks })\n                        renderAllProjectCards();\n                        populateQuickCards();\n                    } else {\n                        console.error(\"Task to update not found in the project's task folder.\")\n                    }\n                } else {\n                    console.error(\"Project to update not found in projects folder.\");\n                }\n            })\n\n            const taskContent = document.createElement(\"p\");\n            taskContent.classList.add(\"projectCardTaskContent\");\n            taskContent.textContent = task.text;\n\n            // create label and wrap tasks in a label to associate with checkbox\n            const taskLabel = document.createElement(\"label\");\n            // attaches label to checkbox\n            taskLabel.htmlFor = checkBox.id;\n            // insert <p> into label\n            taskLabel.append(taskContent);\n\n            // applies strike-through styling to task upon completion\n            if (task.completed) {\n                taskContent.classList.add(\"completed\");\n            } else {\n                taskContent.classList.remove(\"completed\");\n            }\n\n            // Append the checkbox and label \"p\" to the taskRow to build the task item\n            projCardTaskRow.append(checkBox, taskLabel);\n\n            // Handle ordering the tasks based on completion\n            if (task.completed) {\n                completedTasksFragment.appendChild(projCardTaskRow);\n                let hasCompletedTasks = true;\n            } else {\n                incompleteTasksFragment.appendChild(projCardTaskRow);\n            }\n\n        });\n\n        // store the status of the fragments\n        const hasIncompleteTasks = incompleteTasksFragment.hasChildNodes(); // .hasChildNodes() is fine for fragments\n        hasCompletedTasks = completedTasksFragment.hasChildNodes();\n\n        // appends the taskRows AFTER looping through all tasks\n        // adds incompleted tasks first, then the completed tasks wrapper div\n        taskList.appendChild(incompleteTasksFragment);\n\n        if (!hasIncompleteTasks && hasCompletedTasks) {\n            const noTasksMessage = document.createElement(\"p\");\n            noTasksMessage.className = \"noTasksMessage\";\n            noTasksMessage.textContent = \"No pending tasks available.\";\n            taskList.appendChild(noTasksMessage);\n        }\n\n    } else { // If no tasks are found, display message\n        const noTasksMessage = document.createElement(\"p\");\n        noTasksMessage.classList.add(\"noTasksMessage\");\n        noTasksMessage.textContent = \"No pending tasks available.\"\n        taskList.append(noTasksMessage);\n    }\n\n    // FIX: No pending tasks avaialable SHOULD ONLY BE visible when isVisible is set to false\n\n        if (hasCompletedTasks) {\n            // create show/hide button for completed tasks\n            const showCompletedButton = document.createElement(\"button\");\n            showCompletedButton.className = \"toggleCompletedBtn\";\n            showCompletedButton.textContent = \"Show Completed\";\n            const noTasksMessage = taskList.querySelector(\".noTasksMessage\");\n\n            const setToggleState = () => {\n                const isVisible = projItem.isCompletedVisible;\n                completedTasksContainer.style.display = isVisible ? \"flex\" : \"none\";\n                showCompletedButton.textContent = isVisible ? \"Hide Completed\" : \"Show Completed\";\n                if (noTasksMessage) {\n                    noTasksMessage.style.display = isVisible ? \"none\" : \"block\";\n                }\n            }\n\n        showCompletedButton.addEventListener(\"click\", (event) => {\n            event.stopPropagation(); // Prevent click from bubbling up to projectCard\n\n            // Toggles visibility state on object data\n            projItem.isCompletedVisible = !projItem.isCompletedVisible;\n\n            // need to update persistent completed visual state on the actual object data\n            (0,_project_data__WEBPACK_IMPORTED_MODULE_1__.updateProject)(projId, { isCompletedVisible: projItem.isCompletedVisible });\n            console.log(`Toggled 'isCompletedVisible' to ${projItem.isCompletedVisible} for project ${projId} and saved.`);\n            // Handles making visible/hidden\n            setToggleState();\n        });\n\n        completedTasksContainer.appendChild(completedTasksFragment);\n        projectCard.appendChild(showCompletedButton);\n        taskList.appendChild(completedTasksContainer);\n\n        setToggleState();\n    }\n\n    // create trash button\n    const trashButton = document.createElement(\"button\");\n    trashButton.classList.add(\"trashButton\");\n    const trashButtonIcon = `<span class=\"material-symbols-outlined\">delete</span>`;\n    trashButton.innerHTML = trashButtonIcon;\n\n    // add event listener to delete project card on click\n    trashButton.addEventListener(\"click\", (event) => {\n        event.stopPropagation(); // Prevent click from bubbling up to projectCard\n        // add confirm dialog option\n        if (confirm(`Are you sure you want to delete the project \"${projTitle}\"?`)) {\n            projectCard.remove();\n            // delete from storage\n            (0,_project_data__WEBPACK_IMPORTED_MODULE_1__.removeProject)(projId);\n\n            console.log(`Project \"${projTitle}\" (ID: ${projId}) has been deleted.`);\n\n            renderAllProjectCards(); // refresh projFolder\n            populateQuickCards(); // refresh the quick cards\n        }\n    });\n\n    // Open modal for the project card on click\n    projectCard.addEventListener(\"click\", () => {\n        (0,_modal_ui__WEBPACK_IMPORTED_MODULE_0__.openModalForExistingProject)(projId);\n    });\n\n    projectCard.append(cardTitle, taskList, trashButton);\n    projFolder.append(projectCard);\n}\n\nif (addButtonHome) {\n\n    // hides home add button on click and\n    // opens a new modal to create a project\n    addButtonHome.addEventListener(\"click\", () => {\n        addButtonHome.classList.remove(\"isVisible\");\n        (0,_modal_ui__WEBPACK_IMPORTED_MODULE_0__.openModalForNewProj)();\n    });\n\n    // listens in for modalHasOpened custom event to hide the button\n    // when modal is opened some other way (existing proj card was clicked)\n    document.addEventListener('modalHasOpened', () => {\n        console.log(\"modalHasOpened event received.\");\n        if (addButtonHome) {\n            addButtonHome.classList.remove(\"isVisible\");\n        }\n    })\n\n    // makes button visible again when modal closes\n    document.addEventListener('modalHasClosed', () => {\n        console.log(\"modalHasClosed event received.\");\n        if (addButtonHome) {\n            addButtonHome.classList.add(\"isVisible\");\n        }\n    });\n\n} else {\n    console.error(\"Add project button not found in the DOM.\");\n}\n\n\nfunction createQuickRowElement(taskObject, projectId) {\n    const quickTaskRow = document.createElement(\"div\");\n    quickTaskRow.classList.add(\"quickTaskRow\");\n\n    quickTaskRow.dataset.taskId = taskObject.id;\n    quickTaskRow.dataset.projectId = projectId;\n\n    quickTaskRow.addEventListener(\"click\", (event) => {\n        event.stopPropagation(); // If these rows are inside something else clickable\n    });\n\n    const checkBox = document.createElement(\"input\");\n    checkBox.type = \"checkbox\";\n    checkBox.classList.add(\"quickTaskCheckBox\"); // Specific class for styling\n    checkBox.id = `quickcard-proj${projectId}-task${taskObject.id}`;\n    checkBox.checked = taskObject.completed;\n\n    checkBox.addEventListener(\"change\", (event) => {\n        event.stopPropagation();\n        const currentCheckedState = event.target.checked;\n        // Data update logic\n        const projectToUpdate = (0,_project_data__WEBPACK_IMPORTED_MODULE_1__.selectProjectById)(projectId); // Ensure selectProjectById is available\n        if (projectToUpdate) {\n            const taskToUpdate = projectToUpdate.tasks.find(t => t.id === taskObject.id);\n            if (taskToUpdate) {\n                taskToUpdate.completed = currentCheckedState;\n                (0,_project_data__WEBPACK_IMPORTED_MODULE_1__.updateProject)(projectId, { tasks: projectToUpdate.tasks }); \n                \n                \n                populateQuickCards(); // This will re-sort and re-render the quick cards\n                renderAllProjectCards(); // update the main project list\n            }\n        }\n    });\n\n    const taskTextElement = document.createElement(\"p\");\n    taskTextElement.classList.add(\"quickTaskContent\");\n    taskTextElement.textContent = taskObject.text;\n    if (taskObject.completed) {\n        taskTextElement.classList.add(\"completed\"); // apply line-through\n    } else {\n        taskTextElement.classList.remove(\"completed\");\n    }\n\n    const taskLabel = document.createElement(\"label\");\n    taskLabel.htmlFor = checkBox.id;\n    taskLabel.append(taskTextElement);\n\n    quickTaskRow.append(checkBox, taskLabel);\n\n    // set priority background styling\n    (0,_modal_ui__WEBPACK_IMPORTED_MODULE_0__.setPriorityStyle)(quickTaskRow, taskObject.priority);\n    return quickTaskRow;\n}\n\nfunction populateQuickCards() {\n    const todaysTasks = document.querySelector(\".todaysTasks\");\n    const overdueTasks = document.querySelector(\".overdueTasks\");\n    const upcomingTasks = document.querySelector(\".upcomingTasks\");\n\n    // clear the contents before re-population\n    todaysTasks.innerHTML = '';\n    overdueTasks.innerHTML = '';\n    upcomingTasks.innerHTML = '';\n\n    // Groups tasks according to their completion status to handle ordering\n    // in the taskList container\n    const incompleteTodaysTasks = document.createDocumentFragment();\n    const completedTodaysTasks = document.createDocumentFragment();\n    const incompleteOverdueTasks = document.createDocumentFragment();\n    const completedOverdueTasks = document.createDocumentFragment();\n    const incompleteUpcomingTasks = document.createDocumentFragment();\n    const completedUpcomingTasks = document.createDocumentFragment();\n\n    const allProjects = (0,_project_data__WEBPACK_IMPORTED_MODULE_1__.getAllProjects)();\n\n    // set the format of today's date\n    const todayDateObj = new Date();\n    todayDateObj.setHours(0, 0, 0, 0); // Normalize to the start of the day\n\n    const todayYear = todayDateObj.getFullYear();\n    const todayMonth = String(todayDateObj.getMonth() + 1).padStart(2, \"0\");\n    const todayDay = String(todayDateObj.getDate()).padStart(2, \"0\");\n    const todayFormatted = `${todayYear}-${todayMonth}-${todayDay}`;\n\n    const tomorrowDateObj = new Date(todayDateObj); // Start with today\n    tomorrowDateObj.setDate(todayDateObj.getDate() + 1); // Set to tomorrow (this handles month/year rollovers)\n    const tomorrowYear = tomorrowDateObj.getFullYear();\n    const tomorrowMonth = String(tomorrowDateObj.getMonth() + 1).padStart(2, \"0\");\n    const tomorrowDayOfMonth = String(tomorrowDateObj.getDate()).padStart(2, \"0\");\n    const tomorrowFormatted = `${tomorrowYear}-${tomorrowMonth}-${tomorrowDayOfMonth}`;\n\n    const dayAfterTomorrowDateObj = new Date(todayDateObj); // Start with today\n    dayAfterTomorrowDateObj.setDate(todayDateObj.getDate() + 2);\n    const dayAfterTomorrowYear = dayAfterTomorrowDateObj.getFullYear();\n    const dayAfterTomorrowMonth = String(dayAfterTomorrowDateObj.getMonth() + 1).padStart(2, \"0\");\n    const dayAfterTomorrowDayOfMonth = String(dayAfterTomorrowDateObj.getDate()).padStart(2, \"0\");\n    const afterTomorrowFormatted = `${dayAfterTomorrowYear}-${dayAfterTomorrowMonth}-${dayAfterTomorrowDayOfMonth}`;\n\n\n    if (allProjects && allProjects.length > 0) {\n        allProjects.forEach(projItem => {\n            projItem.tasks.forEach(taskObject => {\n                if (taskObject.dueDate) {\n                    const taskRowElement = createQuickRowElement(taskObject, projItem.id); // create task row\n\n                    if (taskObject.dueDate === todayFormatted) {\n                        console.log(`Task \"${taskObject.text}\" (ID: ${taskObject.id}) is due today!`);\n\n                        if (taskObject.completed) {\n                            completedTodaysTasks.appendChild(taskRowElement);\n                        } else {\n                            incompleteTodaysTasks.appendChild(taskRowElement);\n                        }\n                    } else if (taskObject.dueDate < todayFormatted) {\n                        if (taskObject.completed) {\n                            completedOverdueTasks.appendChild(taskRowElement);\n                        } else {\n                            incompleteOverdueTasks.appendChild(taskRowElement);\n                        }\n                    } else if (taskObject.dueDate === tomorrowFormatted) {\n                        if (taskObject.completed) {\n                            completedUpcomingTasks.appendChild(taskRowElement);\n                        } else {\n                            incompleteUpcomingTasks.appendChild(taskRowElement);\n                        }\n                    } else if (taskObject.dueDate === afterTomorrowFormatted) {\n                        if (taskObject.completed) {\n                            completedUpcomingTasks.appendChild(taskRowElement);\n                        } else {\n                            incompleteUpcomingTasks.appendChild(taskRowElement);\n                        }\n                    }\n                }\n            });\n        });\n\n        // handles empty quick panes\n        if (incompleteTodaysTasks.firstChild === null && completedTodaysTasks.firstChild === null) {\n            todaysTasks.innerHTML = '<p class=\"emptyPaneMessage\">No tasks due today.</p>';\n        } else {\n            todaysTasks.appendChild(incompleteTodaysTasks);\n            todaysTasks.appendChild(completedTodaysTasks);\n        }\n\n        if (incompleteOverdueTasks.firstChild === null && completedOverdueTasks.firstChild === null) {\n            overdueTasks.innerHTML = '<p class=\"emptyPaneMessage\">No overdue tasks. Great job!</p>';\n        } else {\n            overdueTasks.appendChild(incompleteOverdueTasks);\n            overdueTasks.appendChild(completedOverdueTasks);\n        }\n\n        if (incompleteUpcomingTasks.firstChild === null && completedUpcomingTasks.firstChild === null) {\n            upcomingTasks.innerHTML = '<p class=\"emptyPaneMessage\">No upcoming tasks for the next two days.</p>';\n        } else {\n            upcomingTasks.appendChild(incompleteUpcomingTasks);\n            upcomingTasks.appendChild(completedUpcomingTasks);\n        }\n    } else {\n        // Handle case where there are no projects at all\n        todaysTasks.innerHTML = '<p class=\"emptyPaneMessage\">No tasks due today.</p>';\n        overdueTasks.innerHTML = '<p class=\"emptyPaneMessage\">No overdue tasks.</p>';\n        upcomingTasks.innerHTML = '<p class=\"emptyPaneMessage\">No upcoming tasks.</p>';\n    }\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/project-template.js\n");

/***/ }),

/***/ "./src/styles.css":
/*!************************!*\
  !*** ./src/styles.css ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ \"./node_modules/css-loader/dist/cjs.js!./src/styles.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxNQUErRjtBQUMvRixNQUFxRjtBQUNyRixNQUE0RjtBQUM1RixNQUErRztBQUMvRyxNQUF3RztBQUN4RyxNQUF3RztBQUN4RyxNQUFvRztBQUNwRztBQUNBOztBQUVBOztBQUVBLDRCQUE0QixxR0FBbUI7QUFDL0Msd0JBQXdCLGtIQUFhO0FBQ3JDLGlCQUFpQix1R0FBYTtBQUM5QixpQkFBaUIsK0ZBQU07QUFDdkIsNkJBQTZCLHNHQUFrQjs7QUFFL0MsYUFBYSwwR0FBRyxDQUFDLHVGQUFPOzs7O0FBSThDO0FBQ3RFLE9BQU8saUVBQWUsdUZBQU8sSUFBSSx1RkFBTyxVQUFVLHVGQUFPLG1CQUFtQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy5jc3M/NDRiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/styles.css\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;